// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hoge/v1/hoge.proto

package hogev1connect

import (
	connect "connectrpc.com/connect"
	v1 "connectrpc/internal/gen/hoge/v1"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HogeServiceName is the fully-qualified name of the HogeService service.
	HogeServiceName = "hoge.v1.HogeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HogeServiceHogeProcedure is the fully-qualified name of the HogeService's Hoge RPC.
	HogeServiceHogeProcedure = "/hoge.v1.HogeService/Hoge"
)

// HogeServiceClient is a client for the hoge.v1.HogeService service.
type HogeServiceClient interface {
	Hoge(context.Context, *connect.Request[v1.HogeRequest]) (*connect.Response[v1.HogeResponse], error)
}

// NewHogeServiceClient constructs a client for the hoge.v1.HogeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHogeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HogeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hogeServiceMethods := v1.File_hoge_v1_hoge_proto.Services().ByName("HogeService").Methods()
	return &hogeServiceClient{
		hoge: connect.NewClient[v1.HogeRequest, v1.HogeResponse](
			httpClient,
			baseURL+HogeServiceHogeProcedure,
			connect.WithSchema(hogeServiceMethods.ByName("Hoge")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hogeServiceClient implements HogeServiceClient.
type hogeServiceClient struct {
	hoge *connect.Client[v1.HogeRequest, v1.HogeResponse]
}

// Hoge calls hoge.v1.HogeService.Hoge.
func (c *hogeServiceClient) Hoge(ctx context.Context, req *connect.Request[v1.HogeRequest]) (*connect.Response[v1.HogeResponse], error) {
	return c.hoge.CallUnary(ctx, req)
}

// HogeServiceHandler is an implementation of the hoge.v1.HogeService service.
type HogeServiceHandler interface {
	Hoge(context.Context, *connect.Request[v1.HogeRequest]) (*connect.Response[v1.HogeResponse], error)
}

// NewHogeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHogeServiceHandler(svc HogeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hogeServiceMethods := v1.File_hoge_v1_hoge_proto.Services().ByName("HogeService").Methods()
	hogeServiceHogeHandler := connect.NewUnaryHandler(
		HogeServiceHogeProcedure,
		svc.Hoge,
		connect.WithSchema(hogeServiceMethods.ByName("Hoge")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hoge.v1.HogeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HogeServiceHogeProcedure:
			hogeServiceHogeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHogeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHogeServiceHandler struct{}

func (UnimplementedHogeServiceHandler) Hoge(context.Context, *connect.Request[v1.HogeRequest]) (*connect.Response[v1.HogeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hoge.v1.HogeService.Hoge is not implemented"))
}
